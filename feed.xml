<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://www.philliphaydon.com/feed.xml</link><description /><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/fixing-osx-for-a-windows-user/</guid><link>http://www.philliphaydon.com/2014/04/fixing-osx-for-a-windows-user/</link><title>Fixing OSX as a Windows User...</title><description>&lt;p&gt;I'm slowly in the process of moving away from my huge desktop computer and moving to my good old 15" Mac Book Pro w/ Retina, as my main computer. Running windows in parallels. But moving to OSX is really hard, things that I take for granted in Windows are just hard in OSX, even after 2 years of having this laptop, and having used OSX for a few years when I lived in New Zealand....&lt;/p&gt;

&lt;p&gt;Sooo I'm making this blog post, mostly as a reference for the future, on what I've done to make life a little easier. &lt;/p&gt;

&lt;h3&gt;Fixing Home / End keys&lt;/h3&gt;

&lt;p&gt;Ahhh I know you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; and &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt;, but I just prefer the Windows key mapping. &lt;/p&gt;

</description><pubDate>Fri, 25 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm slowly in the process of moving away from my huge desktop computer and moving to my good old 15" Mac Book Pro w/ Retina, as my main computer. Running windows in parallels. But moving to OSX is really hard, things that I take for granted in Windows are just hard in OSX, even after 2 years of having this laptop, and having used OSX for a few years when I lived in New Zealand....&lt;/p&gt;

&lt;p&gt;Sooo I'm making this blog post, mostly as a reference for the future, on what I've done to make life a little easier. &lt;/p&gt;

&lt;h3&gt;Fixing Home / End keys&lt;/h3&gt;

&lt;p&gt;Ahhh I know you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; and &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt;, but I just prefer the Windows key mapping. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I found &lt;a href="http://mwholt.blogspot.sg/2012/09/fix-home-and-end-keys-on-mac-os-x.html"&gt;this blog post&lt;/a&gt; by &lt;a href="https://twitter.com/mholt6"&gt;Matthew Holt&lt;/a&gt; which fixes the problem for me! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Copying without permission from Matthew Holt's blog, just incase it dies one day...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Open the Terminal and do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Library
$ mkdir KeyBindings
$ cd KeyBindings
$ nano DefaultKeyBinding.dict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put these lines in that file, including the curly braces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
/* Remap Home / End keys to be correct */
"\UF729" = "moveToBeginningOfLine:"; /* Home */
"\UF72B" = "moveToEndOfLine:"; /* End */
"$\UF729" = "moveToBeginningOfLineAndModifySelection:"; /* Shift + Home */
"$\UF72B" = "moveToEndOfLineAndModifySelection:"; /* Shift + End */
"^\UF729" = "moveToBeginningOfDocument:"; /* Ctrl + Home */
"^\UF72B" = "moveToEndOfDocument:"; /* Ctrl + End */
"$^\UF729" = "moveToBeginningOfDocumentAndModifySelection:"; /* Shift + Ctrl + Home */
"$^\UF72B" = "moveToEndOfDocumentAndModifySelection:"; /* Shift + Ctrl + End */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press Ctrl+O and then Enter to save the file, and Ctrl+X to exit. Restart your computer to have it take full effect.&lt;/p&gt;

&lt;p&gt;Cited Sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://evansweb.info/2005/03/24/mac-os-x-and-home-end-keys"&gt;http://evansweb.info/2005/03/24/mac-os-x-and-home-end-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://soodev.wordpress.com/2011/07/04/mac-os-x-remapping-home-and-end-keys/"&gt;http://soodev.wordpress.com/2011/07/04/mac-os-x-remapping-home-and-end-keys/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Fixing Alt Tab...&lt;/h3&gt;

&lt;p&gt;I have no idea what the person was thinking when they decided that this was a good idea. &lt;/p&gt;

&lt;p&gt;So you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;tab&lt;/kbd&gt; to tab applications... but if you want to tab instances?!? You need to use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;`&lt;/kbd&gt;... So to fix that... Enter &lt;a href="http://manytricks.com/witch/"&gt;Witch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This thing is great, back to the old &lt;kbd&gt;alt/opt&lt;/kbd&gt; + &lt;kbd&gt;tab&lt;/kbd&gt; &lt;/p&gt;

&lt;h3&gt;Fixing Spotlight&lt;/h3&gt;

&lt;p&gt;I don't know how anyone... This is my Spotlight:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Besides pretty much always saying 'indexing' when it does actually 'index'... it's really slow, doesn't give me what I'm looking for, and doesn't seem very helpful.&lt;/p&gt;

&lt;p&gt;Windows 8.1 Search is actually far superior to Spotlight. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.alfredapp.com"&gt;Alfred&lt;/a&gt;... This thing is awesome, from the moment you install it, open it with &lt;kbd&gt;alt/opt&lt;/kbd&gt; + &lt;kbd&gt;space&lt;/kbd&gt;, and run your first start, it gives you the results you want.&lt;/p&gt;

&lt;h3&gt;Fixing maximize windows&lt;/h3&gt;

&lt;p&gt;I like to use windows Maximized, but when you press the little green &lt;code&gt;+&lt;/code&gt; for some reason it only expands the window vertically... I have no idea why...&lt;/p&gt;

&lt;p&gt;Spaces on OSX are pretty awesome, so if I want to have a couple of programs on 2 or 3 spaces I can easily flick between them with &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt; or view all with &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;&amp;uarr;&lt;/kbd&gt;, but when it comes to maximizing a window... while keeping the top tool bar, it seems you can't...&lt;/p&gt;

&lt;p&gt;I always get the argument that I should full screen the app, but I don't want to... &lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.blazingtools.com/right_zoom_mac.html"&gt;RightZoom&lt;/a&gt;, this thing is great, it makes a window take up all the space, both horizontally and vertically. &lt;/p&gt;

&lt;h3&gt;Things I can't fix :(&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Right click context menu to add new file...&lt;/li&gt;
&lt;li&gt;Cut/Paste folders easily (apparently there's some command but I never remember it)&lt;/li&gt;
&lt;/ol&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/</guid><link>http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/</link><title>If you’re not logging, you’re doing it all wrong. (part 1)</title><description>&lt;h2&gt;Part 1: If you’re not logging, you’re doing it all wrong.&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://upboat.me/eltm/so-you're-telling-me/you-have-no-idea-what-is-going-on?.jpg" alt="Really? Seriously?" /&gt;&lt;/p&gt;

&lt;h3&gt;Synopsis: Simple way to start logging your .NET application.&lt;/h3&gt;

&lt;p&gt;Maintaining some production software is most overlooked until a problem arises ... which by then it could be more costly to support and fix if some simple, basic procedures were not considered from day zero. In my opionion, adding the ability to get acess to the internal runnings of your system is crutial to &lt;em&gt;seeing what is going on under the hood&lt;/em&gt; and helping you get some facts to help problem solve a production issue.&lt;/p&gt;

&lt;p&gt;Logging is one of these mechanisms and should be considered and planned before you even start any coding.&lt;/p&gt;

</description><pubDate>Tue, 22 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-22T16:00:00Z</a10:updated><a10:content type="html">&lt;h2&gt;Part 1: If you’re not logging, you’re doing it all wrong.&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://upboat.me/eltm/so-you're-telling-me/you-have-no-idea-what-is-going-on?.jpg" alt="Really? Seriously?" /&gt;&lt;/p&gt;

&lt;h3&gt;Synopsis: Simple way to start logging your .NET application.&lt;/h3&gt;

&lt;p&gt;Maintaining some production software is most overlooked until a problem arises ... which by then it could be more costly to support and fix if some simple, basic procedures were not considered from day zero. In my opionion, adding the ability to get acess to the internal runnings of your system is crutial to &lt;em&gt;seeing what is going on under the hood&lt;/em&gt; and helping you get some facts to help problem solve a production issue.&lt;/p&gt;

&lt;p&gt;Logging is one of these mechanisms and should be considered and planned before you even start any coding.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;What this is not about:    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not an opinion piece about why you should be logging your code. Google for that, then come back when you’re convinced that you need it. &lt;/li&gt;
&lt;li&gt;This is not a lesson in Dependency Injection. Don’t know that? Google it then come back.&lt;/li&gt;
&lt;li&gt;Nor is this a lesson in &lt;a href="http://nlog-project.org/"&gt;NLog&lt;/a&gt;, &lt;a href="http://autofac.org/"&gt;AutoFac&lt;/a&gt; or &lt;a href="http://nancyfx.org/"&gt;NancyFX&lt;/a&gt; / &lt;a href="http://www.asp.net/mvc"&gt;ASP.NET MVC&lt;/a&gt; (sample tools we use in this example)&lt;/li&gt;
&lt;li&gt;Nor will I explain how to setup an account and ‘hosts’ with LogEntries (what the hell is LogEntries? I’ll explain that later).&lt;/li&gt;
&lt;li&gt;Nor will I explain what/how are web.config transformations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;If you’re not logging, then you’re doing it all wrong.&lt;/h3&gt;

&lt;p&gt;You build websites or mobile/desktop applications. Awesome. Therefore, you need to know what is happening &lt;em&gt;during&lt;/em&gt; runtime of your live/production application, otherwise you’re flying blind. &lt;/p&gt;

&lt;p&gt;The trick to logging a .NET application is to make sure that you leverage a logging interface all over your code. Based upon your solution’s configuration (ie. &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;RELEASE&lt;/code&gt; or &lt;code&gt;ANY_OTHER_CUSTOM_CONFIG&lt;/code&gt;) we leverage &lt;code&gt;web.config&lt;/code&gt; &lt;em&gt;transformations&lt;/em&gt; to use the appropriate logging &lt;em&gt;targets&lt;/em&gt;, based on the configuration.&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;Target&lt;/code&gt; = a fancy word for where we dump our logging information to. This could be the console or a file or another gui-application (more on this, later) or some internet website (also more on this magic, later).&lt;/p&gt;

&lt;h3&gt;Tools - we need tools!&lt;/h3&gt;

&lt;p&gt;Then general idea is this&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code your message(s): "Hi, i’m here."  or "OMG, BOOM" or "Just created a new user. UserId: '1'.".&lt;/li&gt;
&lt;li&gt;NLog sends the message somewhere: your GUI app, or email, or a logging website.&lt;/li&gt;
&lt;li&gt;View the messages: use Sentinal (localhost) or LogEntries (production).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And where do we visualize this data again?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sentinel.codeplex.com/"&gt;Sentinal&lt;/a&gt;: A free windows app that displays log information, as it streams in &lt;em&gt;live&lt;/em&gt;. (yes, ~~streams~~ in …)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logentries.com/"&gt;LogEntires&lt;/a&gt;: A website that &lt;em&gt;stores&lt;/em&gt; your log entry information, which you can view it at any time. Also has a live stream.&lt;br /&gt;
&lt;strong&gt;Free account limits data retention to a week .. which for most people (especially when you’re testing/debuging) is &lt;em&gt;totally&lt;/em&gt; sufficient.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay so when to use what?&lt;br /&gt;
- Sentinal: use this for localhost debugging.
- LogEntires: use this for live/production system.
Pro Tip: Yes, you can use Sentinal for live/production if you really want to. But this involves setting up NAT rules in your firewall, opening ports on your local firewall, etc. Basically - a PITA vs using LogEntries which is for free.&lt;/p&gt;

&lt;h3&gt;Show me some code, already! Sheesss…&lt;/h3&gt;

&lt;p&gt;Fine. Let’s do this: LEEEEROOYYYYY JENKINNNNNSSSSSSS……&lt;/p&gt;

&lt;p&gt;Step 1. Download &amp;amp; install &lt;a href="http://sentinel.codeplex.com/"&gt;Sentinal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step 2. Create/Setup a new solution.&lt;br /&gt;
    eg. &lt;code&gt;File -&amp;gt; New -&amp;gt; Web Application.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Lets add some logging information.&lt;/p&gt;

&lt;p&gt;First, we need an existing logging interface package.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/NcM2Lie.png" alt="Nuget command line" /&gt;&lt;/p&gt;

&lt;p&gt;Next we’ll use DI/IOC to inject the logging instance, so lets wire that up first.&lt;/p&gt;

&lt;p&gt;NancyFX:&lt;br /&gt;
(This is using TinyIOC for IoC (which is built into NancyFX))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void ConfigureApplicationContainer(TinyIoCContainer container)
{
    base.ConfigureApplicationContainer(container);

    // NOTE: Use a specific constructor, which is why we have to use the delayed registration.
    var loggingService = new NLogLoggingService();
    container.Register&amp;lt;ILoggingService&amp;gt;((c, p) =&amp;gt; loggingService);

    // Register any other singleton services.
    // …
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASP.Net MVC&lt;br /&gt;
(This is using &lt;a href="http://autofac.org/"&gt;AutoFac&lt;/a&gt; for IoC)    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class DependencyResolutionConfig
{
    public static void RegisterContainers()
    {
        var builder = new ContainerBuilder();

        // Register our services.
        builder.Register(c =&amp;gt; new NLogLoggingService())
            .As&amp;lt;ILoggingService&amp;gt;();

        // Register our controllers (so they will use constructor injection)
        builder.RegisterControllers(typeof(MvcApplication).Assembly);

        var container = builder.Build();

        DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’ll use constructor injection for our logging interface.&lt;br /&gt;
&lt;strong&gt;Side Note&lt;/strong&gt;: I do not consider injecting an &lt;code&gt;ILoggingService&lt;/code&gt; into classes as an &lt;a href="http://jeffreypalermo.com/blog/constructor-over-injection-anti-pattern/"&gt;Anti-Pattern&lt;/a&gt; because IMO I usually log things in &lt;em&gt;all&lt;/em&gt; methods (I'll touch on this, below) so therefore, logging is a fundamental part of each class that contains business logic. As such, my class has a logging dependecy throughout. Not on 1 or some methods, only.&lt;/p&gt;

&lt;p&gt;NancyFX&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Nancy;
using Shouldly;
using SimpleLogging.Core;

namespace SimpleLogging.Samples.NancyFX.Modules
{
    public class HomeModule : NancyModule
    {
        private readonly ILoggingService _loggingService;

        public HomeModule(ILoggingService loggingService)
        {
            loggingService.ShouldNotBe(null);
            _loggingService = loggingService;

            Get["/"] = _ =&amp;gt; GetHome();
        }

        private dynamic GetHome()
        {
            _loggingService.Trace("GetHome");

            _loggingService.Debug("Current DateTime: '{0}'", DateTime.UtcNow);

            return View["home"];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASP.NET MVC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Web.Mvc;
using Shouldly;
using SimpleLogging.Core;

namespace SimpleLogging.Samples.MVC.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILoggingService _loggingService;

        public HomeController(ILoggingService loggingService)
        {
            loggingService.ShouldNotBe(null);
            _loggingService = loggingService;
        }

        //
        // GET: /Home/

        public ActionResult Index()
        {
            _loggingService.Trace("Index");

            _loggingService.Debug("Current DateTime: '{0}'", DateTime.UtcNow);

            return View();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 4. Add an NLog file.&lt;/p&gt;

&lt;p&gt;Add this new file to the root website / application folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nlog.config    

&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="true"&amp;gt;

    &amp;lt;!-- NLog example: https://github.com/nlog/nlog/wiki/Examples --&amp;gt;
    &amp;lt;targets async="true"&amp;gt;
        &amp;lt;target xsi:type="NLogViewer"
                name="sentinal" 
                address="udp://127.0.0.1:9999" /&amp;gt;
    &amp;lt;/targets&amp;gt;

    &amp;lt;rules&amp;gt;
        &amp;lt;logger name="*" minlevel="Trace" writeTo="sentinal"/&amp;gt;
    &amp;lt;/rules&amp;gt;

&amp;lt;/nlog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 5. Run Sentinal&lt;/p&gt;

&lt;p&gt;Step 6. Run the website.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/fRfJVQc.png" alt="Zoh Mai Gawd" /&gt;&lt;/p&gt;

&lt;h3&gt;Recap.&lt;/h3&gt;

&lt;p&gt;So now we’ve started sprinkling logging messages throughout our code. This gives us some Serious.KickAss&amp;trade; insights into what is going on under the hood with our code. We view this logging data locally with our Sentinel app. &lt;/p&gt;

&lt;p&gt;It's not hard to add logging to your website / application. &lt;/p&gt;

&lt;p&gt;Please start to get into the habbit of &lt;code&gt;TRACE&lt;/code&gt;ing and &lt;code&gt;DEBUG&lt;/code&gt;ing your code so you can see what's going on under the hood - when you really need to.&lt;/p&gt;

&lt;h3&gt;NEXT: Part 2 - Levelling up your Logging&lt;/h3&gt;

&lt;p&gt;In the next part, I take all this simple logging magic to the next level : doing this for your live / production website / application!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</guid><link>http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</link><title>Fixing Github with Chrome Plugin - GitHub.Expandinizr</title><description>&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

</description><pubDate>Thu, 06 Feb 2014 16:00:00 Z</pubDate><a10:updated>2014-02-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Luckily &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt; had a brilliant idea... &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This awesome Chrome plugin, turns the above, into:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Into......&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This more responsive design is so awesome! (Apparently thanks to some random guy named &lt;a href="https://twitter.com/khellang"&gt;Kristian Hellang&lt;/a&gt;...) &lt;small&gt;don't follow him, don't need his ego boosted anymore.&lt;/small&gt; ;)&lt;/p&gt;

&lt;p&gt;Such a better use of space, and makes working with Github a billion times more pleasurable!&lt;/p&gt;

&lt;p&gt;Download it now... NOW!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOWWWW!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/"&gt;https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</guid><link>http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</link><title>If you're going to use repositories, don't have generic or base repositories...</title><description>&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Thu, 30 Jan 2014 16:00:00 Z</pubDate><a10:updated>2014-01-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GenericRepository&amp;lt;TEntity&amp;gt; : IRepository&amp;lt;TEntity&amp;gt; where TEntity : class
{
    public virtual IEnumerable&amp;lt;TEntity&amp;gt; FindAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation ...
    }

    public virtual TEntity FindOne(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation
    }

    public void Update(TEntity entity)
    {
        // update your entity ...
    }

    // etc...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are just bad bad bad...&lt;/p&gt;

&lt;h2&gt;Generic Repositories make assumptions about your domain&lt;/h2&gt;

&lt;p&gt;Generic Repositories is that they make assumptions about your domain. It makes assumptions such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All entities should contain Get/List/Update/Add/Delete... etc&lt;/li&gt;
&lt;li&gt;All entities come from the same location (i.e a database)&lt;/li&gt;
&lt;li&gt;All entities have a single primary key of some sort...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with this, is that these are all false assumptions, generic repositories seem to never take into account that entities can have composite keys or no key identifier at all. Or they require some, but not all implementations defined in the base class or interface. &lt;/p&gt;

&lt;p&gt;Often people assume only a single kind of persistence, when you could load some data from a flat file, database, a web service, etc.&lt;/p&gt;

&lt;p&gt;This isn't a problem if you do away with the base implementation or interface and just have explicit interfaces such as &lt;code&gt;IProductRepository&lt;/code&gt; or &lt;code&gt;IUserRepository&lt;/code&gt;, but people get so caught up on the whole idea of having lots of interfaces, and instead try to opt for the generic &lt;code&gt;IRepository&amp;lt;T&amp;gt;&lt;/code&gt; until they need to implement other stuff.&lt;/p&gt;

&lt;h2&gt;Generic Repositories don't prevent code duplication&lt;/h2&gt;

&lt;p&gt;Generic repositories don't prevent duplication because there's no duplication to begin with! What you end up doing is abstracting an abstraction, for the sake if feeling like you're writing less code or getting implementation for free, when you're actually adding unnecessary code that may never be used!&lt;/p&gt;

&lt;p&gt;If for example you have a &lt;code&gt;User&lt;/code&gt; / &lt;code&gt;UserRepository&lt;/code&gt;, you may find that your generic repository asks you to implement &lt;code&gt;Delete&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;But when if you are never required to delete a user, and instead you Deactivate a user, or disable a users login, but keep the user because hes actually attached to data in the system...&lt;/p&gt;

&lt;p&gt;You end up implementing methods, or overriding existing methods to have no implementation or throw a &lt;code&gt;NotImplementedException&lt;/code&gt;. This is just bad design. &lt;/p&gt;

&lt;p&gt;You could argue "Oh but when I implement &lt;code&gt;GetById&lt;/code&gt; I have to duplicate it..."&lt;/p&gt;

&lt;p&gt;Except you're not duplicating it, just because two things do similar or the same things, doesn't mean its duplicated.&lt;/p&gt;

&lt;p&gt;Lets say you have a &lt;code&gt;UserRepository&lt;/code&gt; and &lt;code&gt;OrderRepository&lt;/code&gt;, both have a method defined in a base repository called &lt;code&gt;GetById&lt;/code&gt;, if you changed &lt;code&gt;GetById&lt;/code&gt; for a User, you're changing the way the Order one works. You're potentially breaking your application. These two look the same, but they are different. It's not duplication!&lt;/p&gt;

&lt;h2&gt;Repositories for everything&lt;/h2&gt;

&lt;p&gt;The next issue is people end up creating repositories for everything, not their aggregate roots. For example, say we have an &lt;code&gt;Order&lt;/code&gt; / &lt;code&gt;OrderLine&lt;/code&gt; scenario...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
  public int Id { get; set; }
  ...

  public IList&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
  public int Id { get; set; }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often enough people will create an &lt;code&gt;OrderRepository&lt;/code&gt; and &lt;code&gt;OrderLineRepository&lt;/code&gt;, or use their Generic repositories like &lt;code&gt;BaseRepository&amp;lt;Order&amp;gt;&lt;/code&gt; and &lt;code&gt;BaseRepository&amp;lt;OrderLine&amp;gt;&lt;/code&gt;, the problem is, everything to do with an &lt;code&gt;OrderLine&lt;/code&gt; is actually the responsibility of the &lt;code&gt;Order&lt;/code&gt; and not anything else. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</guid><link>http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</link><title>Snow's new server feature! Runs up a testing website for you.</title><description>&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

</description><pubDate>Tue, 24 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-24T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome right?&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/randompunter"&gt;Damian Hickey&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/davidfowl"&gt;David Fowler&lt;/a&gt; for this feature.&lt;/p&gt;

&lt;p&gt;Damian told me about &lt;a href="https://www.nuget.org/packages/microsoft.owin.staticfiles"&gt;Microsoft.Owin.StaticFiles&lt;/a&gt;, this is an awesome package, basically you can point it to a directory and it will serve up static files. That means for me to setup Snow all I had to write was basically: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configuration(IAppBuilder app)
{
    var fileSystem = new FileServerOptions
    {
        EnableDirectoryBrowsing = true,
        FileSystem = new PhysicalFileSystem(Path.GetFullPath(Settings.Output))
    };

    app.UseFileServer(fileSystem);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created one little problem though :( when running this up it required the command window to be run as Administrator, which isn't very nice.&lt;/p&gt;

&lt;p&gt;Luckily David came to the rescue and let me know about &lt;a href="https://github.com/Bobris/Nowin"&gt;Nowin&lt;/a&gt;, it's a...&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast and scalable Owin Web Server in pure .Net 4.5 (it does not use HttpListener)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Plugging it in was super easy, I simply added some &lt;code&gt;WebApp&lt;/code&gt; options specifying the &lt;code&gt;ServerFactory&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var options = new StartOptions
{
    ServerFactory = "Nowin",
    Port = 5498
};

using (WebApp.Start&amp;lt;Startup&amp;gt;(options))
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM, done, no more asking for admin privileges. :)&lt;/p&gt;

&lt;h2&gt;New merged assemblies&lt;/h2&gt;

&lt;p&gt;With a little help from &lt;a href="https://twitter.com/SimonCropp"&gt;Simon Cropp&lt;/a&gt;, I added &lt;a href="https://www.nuget.org/packages/Costura.Fody"&gt;Costura.Fody&lt;/a&gt;. This awesome little project merges all your assemblies, with NO effort from you at all!&lt;/p&gt;

&lt;p&gt;Simply install the package... and build your project!&lt;/p&gt;

&lt;p&gt;That's how easy it was... Well almost, there's a little problem with Razor, it requires an assembly to be loaded in the AppDomain and if it's not there it throws a wobbly, I don't quite understand but I decided to ignore that single assembly.&lt;/p&gt;

&lt;p&gt;The end result is, Snow now only have 1 files. A &lt;code&gt;.exe&lt;/code&gt; and a &lt;code&gt;.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Much cleaner than before :)&lt;/p&gt;

&lt;p&gt;Snow repository and Snow.Template have been updated with the new awesomeness. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/unit-testing-workflow-foundation-bookmarks-easily/</guid><link>http://www.philliphaydon.com/2013/12/unit-testing-workflow-foundation-bookmarks-easily/</link><title>Unit testing Workflow Foundation Bookmarks... easily...</title><description>&lt;p&gt;I'm not a fan of Workflow Foundation, but you got to do what you got to do. Usually when using WF, unit testing an activity is rather easy. Invoke with some data, assert the out value, possibly watch some methods on some dependencies...&lt;/p&gt;

&lt;p&gt;But when it comes to testing Bookmarks, if the bookmark is created, and resuming it, it's not easy...&lt;/p&gt;

&lt;p&gt;Well that is unless you're using &lt;a href="http://wf.codeplex.com"&gt;Microsoft.Activities.UnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So creating some new projects, a workflow project and a class library for testing...&lt;/p&gt;

</description><pubDate>Tue, 17 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-17T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm not a fan of Workflow Foundation, but you got to do what you got to do. Usually when using WF, unit testing an activity is rather easy. Invoke with some data, assert the out value, possibly watch some methods on some dependencies...&lt;/p&gt;

&lt;p&gt;But when it comes to testing Bookmarks, if the bookmark is created, and resuming it, it's not easy...&lt;/p&gt;

&lt;p&gt;Well that is unless you're using &lt;a href="http://wf.codeplex.com"&gt;Microsoft.Activities.UnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So creating some new projects, a workflow project and a class library for testing...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to add the MS Libraries:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will add:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Microsoft.Activities.UnitTesting&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Microsoft.Activities.Extensions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I've also added &lt;code&gt;xUnit&lt;/code&gt; for testing :)&lt;/p&gt;

&lt;p&gt;Now we can create a basic workflow activity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Activities;

public class SampleActivity : NativeActivity&amp;lt;bool&amp;gt;
{
    public InArgument&amp;lt;int&amp;gt; ValueOne { get; set; }
    public InArgument&amp;lt;int&amp;gt; ValueTwo { get; set; }

    protected override bool CanInduceIdle
    {
        get { return true; }
    }

    protected override void Execute(NativeActivityContext context)
    {
        var valueOne = context.GetValue(ValueOne);
        var valueTwo = context.GetValue(ValueTwo);

        if (valueTwo % 2 == 0)
        {
            //We do something and return true...
            context.SetValue(Result, true);

            return;
        }

        // Else condition was not met so we sleep and come back later
        context.CreateBookmark("Bookmark_" + valueOne, ResumeBookmarkCallback);
    }

    private void ResumeBookmarkCallback(NativeActivityContext context, Bookmark bookmark, object value)
    {
        // When we wake up, return false and let it try again
        context.SetValue(Result, false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Post isn't about workflow, it's about unit testing. This is just a random example. :)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So completely random, given &lt;code&gt;valueTwo&lt;/code&gt; mod &lt;code&gt;2&lt;/code&gt; equals &lt;code&gt;0&lt;/code&gt; then we should set the return value as &lt;code&gt;true&lt;/code&gt;, else we create a bookmark... and when the bookmark is woken, it returns false.&lt;/p&gt;

&lt;p&gt;The first thing we want to test is the super duper happy path, given &lt;code&gt;valueTwo&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt; then we should get &lt;code&gt;0&lt;/code&gt; remaining and we can assert that the result is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_10_For_Value_Two_Should_Have_A_Return_Argument_Of_True()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 10
    });

    // Act
    wfTester.TestActivity();

    // Assert
    wfTester.AssertOutArgument.IsTrue("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create an instance of the &lt;code&gt;WorkflowApplicationTest&lt;/code&gt; class, passing in an activity with data. &lt;/p&gt;

&lt;p&gt;Next we call &lt;code&gt;TestActivity&lt;/code&gt; and then we &lt;code&gt;Assert&lt;/code&gt; the value. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, it passes :)&lt;/p&gt;

&lt;p&gt;Now, given the value 9, we should get a bookmark named &lt;code&gt;Bookmark_123&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_9_For_Value_Two_Should_Have_Bookmark_Using_Value_One()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 9
    });

    // Act
    wfTester.TestActivity();
    wfTester.TestWorkflowApplication.GetBookmarks();

    // Assert
    Assert.Equal("Bookmark_123", wfTester.Bookmarks.First());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like the first test, we start out the same, except after we call &lt;code&gt;TestActivity&lt;/code&gt; we actually call &lt;code&gt;GetBookmarks&lt;/code&gt; off the &lt;code&gt;TestWorkflowApplication&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is rather important, I couldn't find this in any of the documentation, but without this, the &lt;code&gt;Bookmarks&lt;/code&gt; property is always empty...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So by having the &lt;code&gt;GetBookmarks&lt;/code&gt; call, ensures the &lt;code&gt;Bookmarks&lt;/code&gt; property is populated.&lt;/p&gt;

&lt;p&gt;Now, lastly we want to resume the bookmark and assert that the result is returned. We are expecting &lt;code&gt;false&lt;/code&gt; so we create a new test, similar to the last, but we resume...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void When_Resuming_A_Workflow_Should_Get_The_Return_Value_False()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 9
    });

    // Act
    wfTester.TestActivity();
    wfTester.TestWorkflowApplication.ResumeBookmark("Bookmark_123", 0);

    // Assert
    wfTester.AssertOutArgument.IsFalse("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So again, it's similar to the second test, except rather than call &lt;code&gt;GetBookmarks&lt;/code&gt; we called &lt;code&gt;ResumeBookmark&lt;/code&gt;, passing in the bookmark name, and a value. Although in our case we don't need it, so I passed in 0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;null is not allowed :(&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then we assert that the value is false!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And that's it! A passing unit test! Easy peasy :)&lt;/p&gt;

&lt;p&gt;I've put this test into a github repository that can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/WorkflowBookmarkUnitTest.git"&gt;https://github.com/phillip-haydon/WorkflowBookmarkUnitTest.git&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/git-support-in-visual-studio-2013-is-actually-quite-cool/</guid><link>http://www.philliphaydon.com/2013/12/git-support-in-visual-studio-2013-is-actually-quite-cool/</link><title>Git support in Visual Studio 2013... is actually quite cool!</title><description>&lt;p&gt;Lately I've found myself using the new Git support in Visual Studio 2013 more and more, it turns out once you get used to it, its quite handy! Initially my thoughts were its rubbish, mostly because I found it cumbersome, or maybe just that things weren't working the way I thought they were. I do fine some things strange, but it's still completely usable!&lt;/p&gt;

&lt;p&gt;How does it all work?&lt;/p&gt;

&lt;p&gt;Let's start by creating a new project:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I ticked the &lt;code&gt;Create new Git repository&lt;/code&gt; option in the bottom right hand corner, this just initializes the folder for you. &lt;/p&gt;

&lt;p&gt;Now that the project is created, we can open the Team Explorer, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not entirely sure why it does this but when I create new projects, the solution file is never included by default?!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the solution file is excluded, we can right click the file(s) and include them...&lt;/p&gt;

</description><pubDate>Wed, 11 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-11T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Lately I've found myself using the new Git support in Visual Studio 2013 more and more, it turns out once you get used to it, its quite handy! Initially my thoughts were its rubbish, mostly because I found it cumbersome, or maybe just that things weren't working the way I thought they were. I do fine some things strange, but it's still completely usable!&lt;/p&gt;

&lt;p&gt;How does it all work?&lt;/p&gt;

&lt;p&gt;Let's start by creating a new project:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I ticked the &lt;code&gt;Create new Git repository&lt;/code&gt; option in the bottom right hand corner, this just initializes the folder for you. &lt;/p&gt;

&lt;p&gt;Now that the project is created, we can open the Team Explorer, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not entirely sure why it does this but when I create new projects, the solution file is never included by default?!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the solution file is excluded, we can right click the file(s) and include them...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now this gets included with the pend... Included Changes. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we want to exclude stuff, we can right click in the Included Changes:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is very handy, I was working on a project earlier where I couldn't be bothered typing the login credentials in every time. So I hard coded them in the View and excluded the file so it wouldn't get picked up in the Included Changes. Was nice being able to quickly Right Click &gt; Exclude&lt;/p&gt;

&lt;p&gt;Now we can add a comment and commit:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The commit is created locally:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to push it, if we click on &lt;code&gt;Unsynced Commits&lt;/code&gt; we currently get a screen asking us to push to a Remote Repository.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-08.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we enter a URL and try to push:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;My remote repository doesn't exist yet :( so creating it on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-12.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now... where to push from?!? HAH, this is where I got confused. If you try to push before your repository exists, it sort of breaks the workflow. So to fix it, click on the Arrow next to &lt;code&gt;master&lt;/code&gt; branch. And select &lt;code&gt;Manage Branches&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-13.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can then see &lt;code&gt;Unpublished Branches&lt;/code&gt;, right click on your master branch and select &lt;code&gt;Publish&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Visiting GitHub we can see all our pushed changes!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-14.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome! Back in Visual Studio, if we navigate back to our &lt;code&gt;Changes&lt;/code&gt;, we can click on the &lt;code&gt;Action&lt;/code&gt; button next to &lt;code&gt;Commit&lt;/code&gt; and select &lt;code&gt;View History&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-09.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this feature seems to lag a little when loading up a large history&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can see all the history on our commits, for the current selected branch.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I think this support for Git in Visual Studio is really awesome! I suggest you take a look, I still use console primarily, but this is really handy, and I find myself committing more often, which is always a good thing!&lt;/p&gt;

&lt;p&gt;It's also nice to be able to see changed files in Visual Studio!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-15.png" alt="" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/11/snow-gets-drafts/</guid><link>http://www.philliphaydon.com/2013/11/snow-gets-drafts/</link><title>Snow gets Drafts!</title><description>&lt;p&gt;A special thanks goes out to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for this new feature!&lt;/p&gt;

&lt;p&gt;Snow now ships with Drafts and Privates, this is a really cool feature since it allows you to create drafts, and a page to list all drafts (optional). &lt;/p&gt;

&lt;h2&gt;What are the options&lt;/h2&gt;

&lt;p&gt;There are three options for a &lt;code&gt;published&lt;/code&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft is basically a finished or rough cut blog post that you will publish soon, it will be compiled to &lt;code&gt;/drafts&lt;/code&gt; URL and be publicly accessible (either via a known page or the direct URL)&lt;/p&gt;

&lt;p&gt;Private is a post that will not be compiled at all, this will stay as markdown, good for when you want to begin writing something but not have it show up online yet.&lt;/p&gt;

</description><pubDate>Wed, 06 Nov 2013 16:00:00 Z</pubDate><a10:updated>2013-11-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A special thanks goes out to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for this new feature!&lt;/p&gt;

&lt;p&gt;Snow now ships with Drafts and Privates, this is a really cool feature since it allows you to create drafts, and a page to list all drafts (optional). &lt;/p&gt;

&lt;h2&gt;What are the options&lt;/h2&gt;

&lt;p&gt;There are three options for a &lt;code&gt;published&lt;/code&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft is basically a finished or rough cut blog post that you will publish soon, it will be compiled to &lt;code&gt;/drafts&lt;/code&gt; URL and be publicly accessible (either via a known page or the direct URL)&lt;/p&gt;

&lt;p&gt;Private is a post that will not be compiled at all, this will stay as markdown, good for when you want to begin writing something but not have it show up online yet.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;True, this is optional, but its basically the same as not supplying the &lt;code&gt;published&lt;/code&gt; state at all. It will compile your post and make it publicly available. &lt;/p&gt;

&lt;h2&gt;How do I do it?!?&lt;/h2&gt;

&lt;p&gt;In the header of your markdown file, simply add a new property called &lt;code&gt;published&lt;/code&gt; and away you go!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Snow gets Drafts! 
layout: post
categories: Snow 
published: draft
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Where does it go?&lt;/h2&gt;

&lt;p&gt;Your file should be located where all your other posts go. Using this post as an example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As well as the same header as above, with &lt;code&gt;published&lt;/code&gt; set to draft, I can now compile the site. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We get this new drafts folder. The folder structure is the same as a normal post, so the file name and chosen slug will dictate the URL.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Given this information, the URL would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.philliphaydon.com/drafts/2013/11/snow-gets-drafts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat huh?&lt;/p&gt;

&lt;h2&gt;What about that viewing page you told me about?!?&lt;/h2&gt;

&lt;p&gt;To create a viewing page of all drafts, we can create a brand new template in the root of our Snow folder called &lt;code&gt;drafts.cshtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The contents is super simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase&amp;lt;Snow.ViewModels.ContentViewModel&amp;gt;
@using System.Collections.Generic
@{
  Layout = "default.cshtml";
}

&amp;lt;header&amp;gt;
    &amp;lt;div class="head-inner"&amp;gt;
        &amp;lt;h1&amp;gt;Drafts&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class="category-list fancy-container darkishblue"&amp;gt;
@foreach(var draft in Model.Drafts){
  &amp;lt;li&amp;gt;&amp;lt;a href="@draft.Url" title="@draft.Title"&amp;gt;@draft.Title&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how I have mine marked up, similar to how my archive pages work. &lt;/p&gt;

&lt;p&gt;Next, add it to the config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a snippet of my config&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;},{
    "file": "archive.cshtml"
},{
    "file": "drafts.cshtml",
    "loop": "Drafts"
},{
    "file": "about.cshtml"
},{
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it, now we can compile our Snow site.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Bam we have a new index file, and it has listed out the current drafts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;
    &amp;lt;div class="head-inner"&amp;gt;
        &amp;lt;h1&amp;gt;Drafts&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class="category-list fancy-container darkishblue"&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href="/drafts//2013/11/snow-gets-drafts/" title="Snow gets Drafts!"&amp;gt;Snow gets Drafts!&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;h2&gt;Things to note.&lt;/h2&gt;

&lt;p&gt;Snow has some Razor helpers for things like Analytics. If you're using the helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.RenderGoogleAnalytics("UA-######-##")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then Snow will not render any analytically code for the Draft index or compiled Draft Posts. This means Google wont pick it up unless you link to it somewhere. &lt;em&gt;(considering adding a helper to set no-cache and such in the header)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyway that's it, the new Drafts feature in Snow. Thanks again to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for implementing this for us!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/11/making-nancy-modules-easier-to-manage/</guid><link>http://www.philliphaydon.com/2013/11/making-nancy-modules-easier-to-manage/</link><title>Making Nancy Modules easier to manage</title><description>&lt;p&gt;One problem I think a lot of developers have, is creating Controllers and Modules that are small and maintainable. Sometimes when you add some querying, bit of validation, pass it off to a repository or service, etc. It begins to become a little bit too big. &lt;/p&gt;

&lt;p&gt;Lets assume our we have an &lt;code&gt;AccountModule&lt;/code&gt; it Gets a Login route to load the UI, and Posts to a Login route to authenticate the user, and do something.&lt;/p&gt;

&lt;p&gt;It also Gets a Register route to load the UI, and Posts to a Register route to register the new user. &lt;/p&gt;

&lt;p&gt;Without an actual implementation, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountModule : NancyModule
{
    public AccountModule() : base("/account")
    {
        Get["/login"] = _ =&amp;gt; "login";
        Post["/login"] = _ =&amp;gt; "login";

        Get["/register"] = _ =&amp;gt; "register";
        Post["/register"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we only have 4 things to implement, its rather small, somewhat easy to manage, but what happens when we want to update an account?&lt;/p&gt;

</description><pubDate>Sat, 02 Nov 2013 16:00:00 Z</pubDate><a10:updated>2013-11-02T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One problem I think a lot of developers have, is creating Controllers and Modules that are small and maintainable. Sometimes when you add some querying, bit of validation, pass it off to a repository or service, etc. It begins to become a little bit too big. &lt;/p&gt;

&lt;p&gt;Lets assume our we have an &lt;code&gt;AccountModule&lt;/code&gt; it Gets a Login route to load the UI, and Posts to a Login route to authenticate the user, and do something.&lt;/p&gt;

&lt;p&gt;It also Gets a Register route to load the UI, and Posts to a Register route to register the new user. &lt;/p&gt;

&lt;p&gt;Without an actual implementation, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountModule : NancyModule
{
    public AccountModule() : base("/account")
    {
        Get["/login"] = _ =&amp;gt; "login";
        Post["/login"] = _ =&amp;gt; "login";

        Get["/register"] = _ =&amp;gt; "register";
        Post["/register"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we only have 4 things to implement, its rather small, somewhat easy to manage, but what happens when we want to update an account?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;Get["details"] = _ =&amp;gt; "details...";
Post["details"] = _ =&amp;gt; "details...";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we want to have a profile...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["profile"] = _ =&amp;gt; "profile...";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just keeps adding up...&lt;/p&gt;

&lt;p&gt;At this point it begins to get cluttered. Not only that, I believe this also breaks the Single Responsibility Principal.&lt;/p&gt;

&lt;h2&gt;My solution!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This isn't anything new, I personally haven't seen anyone blog about this stuff but I have absolutely no doubt people most likely create controllers like this in MVC&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that's why I've decided Modules should be broken up into Functionality rather than Functional Areas.&lt;/p&gt;

&lt;p&gt;All these things hang off &lt;code&gt;Account&lt;/code&gt;, so lets create an &lt;code&gt;Account&lt;/code&gt; folder in our &lt;code&gt;Modules&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;Inside this folder we can create 4 new modules.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/small-nancy-module-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So we have 4 modules rather than 1:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DetailsModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoginModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProfileModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegisterModule&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can expect, these are all really small now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DetailsModule : NancyModule
{
    public DetailsModule()
        : base("/account/details")
    {
        Get["/"] = _ =&amp;gt; "details";
    }
}

public class LoginModule : NancyModule
{
    public LoginModule()
        : base("/account/login")
    {
        Get["/"] = _ =&amp;gt; "login";
        Post["/"] = _ =&amp;gt; "login";
    }
}

public class ProfileModule : NancyModule
{
    public ProfileModule()
        : base("/account/profile")
    {
        Get["/"] = _ =&amp;gt; "profile...";
    }
}

public class RegisterModule : NancyModule
{
    public RegisterModule()
        : base("/account/register")
    {
        Get["/"] = _ =&amp;gt; "register";
        Post["/"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From our folder perspective we can easily find all Modules under the &lt;code&gt;/account&lt;/code&gt; route, and easily find the one related to &lt;code&gt;Login&lt;/code&gt;, or &lt;code&gt;Register&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;This also makes unit testing easier since we only need to worry about dependencies related to a specific piece of functionality. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Login&lt;/code&gt; might use a RavenDB session and Password Hashing Service, while &lt;code&gt;Profile&lt;/code&gt; may use RavenDB and a 3rd party Image hosting service for Profile pictures. &lt;/p&gt;

&lt;p&gt;Disagree or have a better way? Would love to hear! Share in the comments :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/running-javascript-unit-tests-in-visual-studio-with-jasmine-and-resharper/</guid><link>http://www.philliphaydon.com/2013/10/running-javascript-unit-tests-in-visual-studio-with-jasmine-and-resharper/</link><title>Running JavaScript Unit Tests in Visual Studio with Jasmine &amp; ReSharper</title><description>&lt;p&gt;There's so much information on the internet in terms of JavaScript Unit Testing and how to run tests etc, but when it comes to running tests in Visual Studio, without a browser, there's very little information. I had to piece information together to figure it out.&lt;/p&gt;

&lt;p&gt;So I'm going to do a small series on this.&lt;/p&gt;

&lt;p&gt;Things you will need!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pivotal.github.io/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup PhantomJS&lt;/h2&gt;

&lt;p&gt;To run JavaScript tests without a browser, we need PhantomJS, and we need to wire it up into Resharper.&lt;/p&gt;

</description><pubDate>Wed, 23 Oct 2013 16:00:00 Z</pubDate><a10:updated>2013-10-23T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;There's so much information on the internet in terms of JavaScript Unit Testing and how to run tests etc, but when it comes to running tests in Visual Studio, without a browser, there's very little information. I had to piece information together to figure it out.&lt;/p&gt;

&lt;p&gt;So I'm going to do a small series on this.&lt;/p&gt;

&lt;p&gt;Things you will need!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pivotal.github.io/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup PhantomJS&lt;/h2&gt;

&lt;p&gt;To run JavaScript tests without a browser, we need PhantomJS, and we need to wire it up into Resharper.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Download PhantomJS and unzip it somewhere, I put it in my development folder. Next open up ReSharper Options:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the Unit Testing &gt; JavaScript Tests and set the PhantomJS path to the &lt;code&gt;.exe&lt;/code&gt; where you unzipped it to:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Save all that and PhantomJS will be all setup and ready to run out tests!&lt;/p&gt;

&lt;h2&gt;Folder Setup&lt;/h2&gt;

&lt;p&gt;In Visual Studio create a new &lt;code&gt;Empty Project&lt;/code&gt;, or something similar, add some folders, naming isn't important but I've stuck with &lt;code&gt;dependencies&lt;/code&gt; for things like Jasmine, &lt;code&gt;sources&lt;/code&gt; for the files we will be testing, and &lt;code&gt;specs&lt;/code&gt; for the Jasmine specs.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;jasmine.js&lt;/code&gt; file into the dependencies folder, and create two empty files for &lt;code&gt;Calculator.js&lt;/code&gt; and &lt;code&gt;CalculatorSpec.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will create a super simple calculator that's only capable of multiplying two numbers. There's lots of Jasmine examples so I'm not going to bore you with those details. &lt;/p&gt;

&lt;h2&gt;Our first basic test&lt;/h2&gt;

&lt;p&gt;Lets start by adding a basic test in our &lt;code&gt;CalculatorSpec.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///&amp;lt;reference path="~/dependencies/jasmine.js"/&amp;gt;
///&amp;lt;reference path="~/sources/Calculator.js"/&amp;gt;

describe("Calculator", function () {
    var calculator = new Calculator();

    it("should multiple two positive numbers", function () {
        var result = calculator.multiple(2, 5);

        expect(result).toBe(10);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's break this down, at the top I have some 'reference path' comments, then I have the actual test. The reference paths is what got me initially when trying to get this working.&lt;/p&gt;

&lt;p&gt;Its a Visual Studio thing which gives intellisense, but it also allows ReSharper to find the files when running the unit tests. Without it the tests fail. &lt;/p&gt;

&lt;p&gt;So if we run this test now...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We have no implementation, so lets implement!&lt;/p&gt;

&lt;p&gt;Lets create a new function for the &lt;code&gt;Calculator&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now its undefined on the function call &lt;code&gt;multiple&lt;/code&gt;, so lets add it in, but lets return a hard coded value of -100&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {
    this.multiple = function() {
        return -100;
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Almost there, now lets multiple two values together!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {
    this.multiple = function(valueOne, valueTwo) {
        return valueOne * valueTwo;
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM it passes!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Our first test without a browser.&lt;/p&gt;

&lt;p&gt;Next up I'll show you how you can also test with a browser, and how to reference files in a separate project.&lt;/p&gt;
</a10:content></item></channel></rss>