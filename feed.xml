<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://www.philliphaydon.com/feed.xml</link><description /><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</guid><link>http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</link><title>Fixing Github with Chrome Plugin - GitHub.Expandinizr</title><description>&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

</description><pubDate>Thu, 06 Feb 2014 16:00:00 Z</pubDate><a10:updated>2014-02-06T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Luckily &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt; had a brilliant idea... &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This awesome Chrome plugin, turns the above, into:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Into......&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This more responsive design is so awesome! (Apparently thanks to some random guy named &lt;a href="https://twitter.com/khellang"&gt;Kristian Hellang&lt;/a&gt;...) &lt;small&gt;don't follow him, don't need his ego boosted anymore.&lt;/small&gt; ;)&lt;/p&gt;

&lt;p&gt;Such a better use of space, and makes working with Github a billion times more pleasurable!&lt;/p&gt;

&lt;p&gt;Download it now... NOW!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOWWWW!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/"&gt;https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</guid><link>http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</link><title>If you're going to use repositories, don't have generic or base repositories...</title><description>&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Thu, 30 Jan 2014 16:00:00 Z</pubDate><a10:updated>2014-01-30T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GenericRepository&amp;lt;TEntity&amp;gt; : IRepository&amp;lt;TEntity&amp;gt; where TEntity : class
{
    public virtual IEnumerable&amp;lt;TEntity&amp;gt; FindAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation ...
    }

    public virtual TEntity FindOne(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation
    }

    public void Update(TEntity entity)
    {
        // update your entity ...
    }

    // etc...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are just bad bad bad...&lt;/p&gt;

&lt;h2&gt;Generic Repositories make assumptions about your domain&lt;/h2&gt;

&lt;p&gt;Generic Repositories is that they make assumptions about your domain. It makes assumptions such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All entities should contain Get/List/Update/Add/Delete... etc&lt;/li&gt;
&lt;li&gt;All entities come from the same location (i.e a database)&lt;/li&gt;
&lt;li&gt;All entities have a single primary key of some sort...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with this, is that these are all false assumptions, generic repositories seem to never take into account that entities can have composite keys or no key identifier at all. Or they require some, but not all implementations defined in the base class or interface. &lt;/p&gt;

&lt;p&gt;Often people assume only a single kind of persistence, when you could load some data from a flat file, database, a web service, etc.&lt;/p&gt;

&lt;p&gt;This isn't a problem if you do away with the base implementation or interface and just have explicit interfaces such as &lt;code&gt;IProductRepository&lt;/code&gt; or &lt;code&gt;IUserRepository&lt;/code&gt;, but people get so caught up on the whole idea of having lots of interfaces, and instead try to opt for the generic &lt;code&gt;IRepository&amp;lt;T&amp;gt;&lt;/code&gt; until they need to implement other stuff.&lt;/p&gt;

&lt;h2&gt;Generic Repositories don't prevent code duplication&lt;/h2&gt;

&lt;p&gt;Generic repositories don't prevent duplication because there's no duplication to begin with! What you end up doing is abstracting an abstraction, for the sake if feeling like you're writing less code or getting implementation for free, when you're actually adding unnecessary code that may never be used!&lt;/p&gt;

&lt;p&gt;If for example you have a &lt;code&gt;User&lt;/code&gt; / &lt;code&gt;UserRepository&lt;/code&gt;, you may find that your generic repository asks you to implement &lt;code&gt;Delete&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;But when if you are never required to delete a user, and instead you Deactivate a user, or disable a users login, but keep the user because hes actually attached to data in the system...&lt;/p&gt;

&lt;p&gt;You end up implementing methods, or overriding existing methods to have no implementation or throw a &lt;code&gt;NotImplementedException&lt;/code&gt;. This is just bad design. &lt;/p&gt;

&lt;p&gt;You could argue "Oh but when I implement &lt;code&gt;GetById&lt;/code&gt; I have to duplicate it..."&lt;/p&gt;

&lt;p&gt;Except you're not duplicating it, just because two things do similar or the same things, doesn't mean its duplicated.&lt;/p&gt;

&lt;p&gt;Lets say you have a &lt;code&gt;UserRepository&lt;/code&gt; and &lt;code&gt;OrderRepository&lt;/code&gt;, both have a method defined in a base repository called &lt;code&gt;GetById&lt;/code&gt;, if you changed &lt;code&gt;GetById&lt;/code&gt; for a User, you're changing the way the Order one works. You're potentially breaking your application. These two look the same, but they are different. It's not duplication!&lt;/p&gt;

&lt;h2&gt;Repositories for everything&lt;/h2&gt;

&lt;p&gt;The next issue is people end up creating repositories for everything, not their aggregate roots. For example, say we have an &lt;code&gt;Order&lt;/code&gt; / &lt;code&gt;OrderLine&lt;/code&gt; scenario...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
  public int Id { get; set; }
  ...

  public IList&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
  public int Id { get; set; }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often enough people will create an &lt;code&gt;OrderRepository&lt;/code&gt; and &lt;code&gt;OrderLineRepository&lt;/code&gt;, or use their Generic repositories like &lt;code&gt;BaseRepository&amp;lt;Order&amp;gt;&lt;/code&gt; and &lt;code&gt;BaseRepository&amp;lt;OrderLine&amp;gt;&lt;/code&gt;, the problem is, everything to do with an &lt;code&gt;OrderLine&lt;/code&gt; is actually the responsibility of the &lt;code&gt;Order&lt;/code&gt; and not anything else. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</guid><link>http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</link><title>Snow's new server feature! Runs up a testing website for you.</title><description>&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

</description><pubDate>Tue, 24 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-24T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome right?&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/randompunter"&gt;Damian Hickey&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/davidfowl"&gt;David Fowler&lt;/a&gt; for this feature.&lt;/p&gt;

&lt;p&gt;Damian told me about &lt;a href="https://www.nuget.org/packages/microsoft.owin.staticfiles"&gt;Microsoft.Owin.StaticFiles&lt;/a&gt;, this is an awesome package, basically you can point it to a directory and it will serve up static files. That means for me to setup Snow all I had to write was basically: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configuration(IAppBuilder app)
{
    var fileSystem = new FileServerOptions
    {
        EnableDirectoryBrowsing = true,
        FileSystem = new PhysicalFileSystem(Path.GetFullPath(Settings.Output))
    };

    app.UseFileServer(fileSystem);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created one little problem though :( when running this up it required the command window to be run as Administrator, which isn't very nice.&lt;/p&gt;

&lt;p&gt;Luckily David came to the rescue and let me know about &lt;a href="https://github.com/Bobris/Nowin"&gt;Nowin&lt;/a&gt;, it's a...&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast and scalable Owin Web Server in pure .Net 4.5 (it does not use HttpListener)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Plugging it in was super easy, I simply added some &lt;code&gt;WebApp&lt;/code&gt; options specifying the &lt;code&gt;ServerFactory&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var options = new StartOptions
{
    ServerFactory = "Nowin",
    Port = 5498
};

using (WebApp.Start&amp;lt;Startup&amp;gt;(options))
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM, done, no more asking for admin privileges. :)&lt;/p&gt;

&lt;h2&gt;New merged assemblies&lt;/h2&gt;

&lt;p&gt;With a little help from &lt;a href="https://twitter.com/SimonCropp"&gt;Simon Cropp&lt;/a&gt;, I added &lt;a href="https://www.nuget.org/packages/Costura.Fody"&gt;Costura.Fody&lt;/a&gt;. This awesome little project merges all your assemblies, with NO effort from you at all!&lt;/p&gt;

&lt;p&gt;Simply install the package... and build your project!&lt;/p&gt;

&lt;p&gt;That's how easy it was... Well almost, there's a little problem with Razor, it requires an assembly to be loaded in the AppDomain and if it's not there it throws a wobbly, I don't quite understand but I decided to ignore that single assembly.&lt;/p&gt;

&lt;p&gt;The end result is, Snow now only have 1 files. A &lt;code&gt;.exe&lt;/code&gt; and a &lt;code&gt;.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Much cleaner than before :)&lt;/p&gt;

&lt;p&gt;Snow repository and Snow.Template have been updated with the new awesomeness. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/unit-testing-workflow-foundation-bookmarks-easily/</guid><link>http://www.philliphaydon.com/2013/12/unit-testing-workflow-foundation-bookmarks-easily/</link><title>Unit testing Workflow Foundation Bookmarks... easily...</title><description>&lt;p&gt;I'm not a fan of Workflow Foundation, but you got to do what you got to do. Usually when using WF, unit testing an activity is rather easy. Invoke with some data, assert the out value, possibly watch some methods on some dependencies...&lt;/p&gt;

&lt;p&gt;But when it comes to testing Bookmarks, if the bookmark is created, and resuming it, it's not easy...&lt;/p&gt;

&lt;p&gt;Well that is unless you're using &lt;a href="http://wf.codeplex.com"&gt;Microsoft.Activities.UnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So creating some new projects, a workflow project and a class library for testing...&lt;/p&gt;

</description><pubDate>Tue, 17 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-17T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;I'm not a fan of Workflow Foundation, but you got to do what you got to do. Usually when using WF, unit testing an activity is rather easy. Invoke with some data, assert the out value, possibly watch some methods on some dependencies...&lt;/p&gt;

&lt;p&gt;But when it comes to testing Bookmarks, if the bookmark is created, and resuming it, it's not easy...&lt;/p&gt;

&lt;p&gt;Well that is unless you're using &lt;a href="http://wf.codeplex.com"&gt;Microsoft.Activities.UnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So creating some new projects, a workflow project and a class library for testing...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to add the MS Libraries:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will add:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Microsoft.Activities.UnitTesting&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Microsoft.Activities.Extensions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I've also added &lt;code&gt;xUnit&lt;/code&gt; for testing :)&lt;/p&gt;

&lt;p&gt;Now we can create a basic workflow activity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Activities;

public class SampleActivity : NativeActivity&amp;lt;bool&amp;gt;
{
    public InArgument&amp;lt;int&amp;gt; ValueOne { get; set; }
    public InArgument&amp;lt;int&amp;gt; ValueTwo { get; set; }

    protected override bool CanInduceIdle
    {
        get { return true; }
    }

    protected override void Execute(NativeActivityContext context)
    {
        var valueOne = context.GetValue(ValueOne);
        var valueTwo = context.GetValue(ValueTwo);

        if (valueTwo % 2 == 0)
        {
            //We do something and return true...
            context.SetValue(Result, true);

            return;
        }

        // Else condition was not met so we sleep and come back later
        context.CreateBookmark("Bookmark_" + valueOne, ResumeBookmarkCallback);
    }

    private void ResumeBookmarkCallback(NativeActivityContext context, Bookmark bookmark, object value)
    {
        // When we wake up, return false and let it try again
        context.SetValue(Result, false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Post isn't about workflow, it's about unit testing. This is just a random example. :)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So completely random, given &lt;code&gt;valueTwo&lt;/code&gt; mod &lt;code&gt;2&lt;/code&gt; equals &lt;code&gt;0&lt;/code&gt; then we should set the return value as &lt;code&gt;true&lt;/code&gt;, else we create a bookmark... and when the bookmark is woken, it returns false.&lt;/p&gt;

&lt;p&gt;The first thing we want to test is the super duper happy path, given &lt;code&gt;valueTwo&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt; then we should get &lt;code&gt;0&lt;/code&gt; remaining and we can assert that the result is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_10_For_Value_Two_Should_Have_A_Return_Argument_Of_True()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 10
    });

    // Act
    wfTester.TestActivity();

    // Assert
    wfTester.AssertOutArgument.IsTrue("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create an instance of the &lt;code&gt;WorkflowApplicationTest&lt;/code&gt; class, passing in an activity with data. &lt;/p&gt;

&lt;p&gt;Next we call &lt;code&gt;TestActivity&lt;/code&gt; and then we &lt;code&gt;Assert&lt;/code&gt; the value. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, it passes :)&lt;/p&gt;

&lt;p&gt;Now, given the value 9, we should get a bookmark named &lt;code&gt;Bookmark_123&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_9_For_Value_Two_Should_Have_Bookmark_Using_Value_One()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 9
    });

    // Act
    wfTester.TestActivity();
    wfTester.TestWorkflowApplication.GetBookmarks();

    // Assert
    Assert.Equal("Bookmark_123", wfTester.Bookmarks.First());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like the first test, we start out the same, except after we call &lt;code&gt;TestActivity&lt;/code&gt; we actually call &lt;code&gt;GetBookmarks&lt;/code&gt; off the &lt;code&gt;TestWorkflowApplication&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is rather important, I couldn't find this in any of the documentation, but without this, the &lt;code&gt;Bookmarks&lt;/code&gt; property is always empty...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So by having the &lt;code&gt;GetBookmarks&lt;/code&gt; call, ensures the &lt;code&gt;Bookmarks&lt;/code&gt; property is populated.&lt;/p&gt;

&lt;p&gt;Now, lastly we want to resume the bookmark and assert that the result is returned. We are expecting &lt;code&gt;false&lt;/code&gt; so we create a new test, similar to the last, but we resume...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void When_Resuming_A_Workflow_Should_Get_The_Return_Value_False()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 9
    });

    // Act
    wfTester.TestActivity();
    wfTester.TestWorkflowApplication.ResumeBookmark("Bookmark_123", 0);

    // Assert
    wfTester.AssertOutArgument.IsFalse("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So again, it's similar to the second test, except rather than call &lt;code&gt;GetBookmarks&lt;/code&gt; we called &lt;code&gt;ResumeBookmark&lt;/code&gt;, passing in the bookmark name, and a value. Although in our case we don't need it, so I passed in 0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;null is not allowed :(&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then we assert that the value is false!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And that's it! A passing unit test! Easy peasy :)&lt;/p&gt;

&lt;p&gt;I've put this test into a github repository that can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/WorkflowBookmarkUnitTest.git"&gt;https://github.com/phillip-haydon/WorkflowBookmarkUnitTest.git&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/git-support-in-visual-studio-2013-is-actually-quite-cool/</guid><link>http://www.philliphaydon.com/2013/12/git-support-in-visual-studio-2013-is-actually-quite-cool/</link><title>Git support in Visual Studio 2013... is actually quite cool!</title><description>&lt;p&gt;Lately I've found myself using the new Git support in Visual Studio 2013 more and more, it turns out once you get used to it, its quite handy! Initially my thoughts were its rubbish, mostly because I found it cumbersome, or maybe just that things weren't working the way I thought they were. I do fine some things strange, but it's still completely usable!&lt;/p&gt;

&lt;p&gt;How does it all work?&lt;/p&gt;

&lt;p&gt;Let's start by creating a new project:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/git-support-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I ticked the &lt;code&gt;Create new Git repository&lt;/code&gt; option in the bottom right hand corner, this just initializes the folder for you. &lt;/p&gt;

&lt;p&gt;Now that the project is created, we can open the Team Explorer, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/git-support-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not entirely sure why it does this but when I create new projects, the solution file is never included by default?!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the solution file is excluded, we can right click the file(s) and include them...&lt;/p&gt;

</description><pubDate>Wed, 11 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-11T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Lately I've found myself using the new Git support in Visual Studio 2013 more and more, it turns out once you get used to it, its quite handy! Initially my thoughts were its rubbish, mostly because I found it cumbersome, or maybe just that things weren't working the way I thought they were. I do fine some things strange, but it's still completely usable!&lt;/p&gt;

&lt;p&gt;How does it all work?&lt;/p&gt;

&lt;p&gt;Let's start by creating a new project:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I ticked the &lt;code&gt;Create new Git repository&lt;/code&gt; option in the bottom right hand corner, this just initializes the folder for you. &lt;/p&gt;

&lt;p&gt;Now that the project is created, we can open the Team Explorer, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not entirely sure why it does this but when I create new projects, the solution file is never included by default?!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the solution file is excluded, we can right click the file(s) and include them...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now this gets included with the pend... Included Changes. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we want to exclude stuff, we can right click in the Included Changes:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is very handy, I was working on a project earlier where I couldn't be bothered typing the login credentials in every time. So I hard coded them in the View and excluded the file so it wouldn't get picked up in the Included Changes. Was nice being able to quickly Right Click &gt; Exclude&lt;/p&gt;

&lt;p&gt;Now we can add a comment and commit:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The commit is created locally:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to push it, if we click on &lt;code&gt;Unsynced Commits&lt;/code&gt; we currently get a screen asking us to push to a Remote Repository.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-08.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we enter a URL and try to push:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;My remote repository doesn't exist yet :( so creating it on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-12.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now... where to push from?!? HAH, this is where I got confused. If you try to push before your repository exists, it sort of breaks the workflow. So to fix it, click on the Arrow next to &lt;code&gt;master&lt;/code&gt; branch. And select &lt;code&gt;Manage Branches&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-13.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can then see &lt;code&gt;Unpublished Branches&lt;/code&gt;, right click on your master branch and select &lt;code&gt;Publish&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Visiting GitHub we can see all our pushed changes!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-14.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome! Back in Visual Studio, if we navigate back to our &lt;code&gt;Changes&lt;/code&gt;, we can click on the &lt;code&gt;Action&lt;/code&gt; button next to &lt;code&gt;Commit&lt;/code&gt; and select &lt;code&gt;View History&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-09.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this feature seems to lag a little when loading up a large history&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can see all the history on our commits, for the current selected branch.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I think this support for Git in Visual Studio is really awesome! I suggest you take a look, I still use console primarily, but this is really handy, and I find myself committing more often, which is always a good thing!&lt;/p&gt;

&lt;p&gt;It's also nice to be able to see changed files in Visual Studio!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-15.png" alt="" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/11/snow-gets-drafts/</guid><link>http://www.philliphaydon.com/2013/11/snow-gets-drafts/</link><title>Snow gets Drafts!</title><description>&lt;p&gt;A special thanks goes out to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for this new feature!&lt;/p&gt;

&lt;p&gt;Snow now ships with Drafts and Privates, this is a really cool feature since it allows you to create drafts, and a page to list all drafts (optional). &lt;/p&gt;

&lt;h2&gt;What are the options&lt;/h2&gt;

&lt;p&gt;There are three options for a &lt;code&gt;published&lt;/code&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft is basically a finished or rough cut blog post that you will publish soon, it will be compiled to &lt;code&gt;/drafts&lt;/code&gt; URL and be publicly accessible (either via a known page or the direct URL)&lt;/p&gt;

&lt;p&gt;Private is a post that will not be compiled at all, this will stay as markdown, good for when you want to begin writing something but not have it show up online yet.&lt;/p&gt;

</description><pubDate>Wed, 06 Nov 2013 16:00:00 Z</pubDate><a10:updated>2013-11-06T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;A special thanks goes out to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for this new feature!&lt;/p&gt;

&lt;p&gt;Snow now ships with Drafts and Privates, this is a really cool feature since it allows you to create drafts, and a page to list all drafts (optional). &lt;/p&gt;

&lt;h2&gt;What are the options&lt;/h2&gt;

&lt;p&gt;There are three options for a &lt;code&gt;published&lt;/code&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft is basically a finished or rough cut blog post that you will publish soon, it will be compiled to &lt;code&gt;/drafts&lt;/code&gt; URL and be publicly accessible (either via a known page or the direct URL)&lt;/p&gt;

&lt;p&gt;Private is a post that will not be compiled at all, this will stay as markdown, good for when you want to begin writing something but not have it show up online yet.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;True, this is optional, but its basically the same as not supplying the &lt;code&gt;published&lt;/code&gt; state at all. It will compile your post and make it publicly available. &lt;/p&gt;

&lt;h2&gt;How do I do it?!?&lt;/h2&gt;

&lt;p&gt;In the header of your markdown file, simply add a new property called &lt;code&gt;published&lt;/code&gt; and away you go!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Snow gets Drafts! 
layout: post
categories: Snow 
published: draft
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Where does it go?&lt;/h2&gt;

&lt;p&gt;Your file should be located where all your other posts go. Using this post as an example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As well as the same header as above, with &lt;code&gt;published&lt;/code&gt; set to draft, I can now compile the site. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We get this new drafts folder. The folder structure is the same as a normal post, so the file name and chosen slug will dictate the URL.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Given this information, the URL would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.philliphaydon.com/drafts/2013/11/snow-gets-drafts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat huh?&lt;/p&gt;

&lt;h2&gt;What about that viewing page you told me about?!?&lt;/h2&gt;

&lt;p&gt;To create a viewing page of all drafts, we can create a brand new template in the root of our Snow folder called &lt;code&gt;drafts.cshtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The contents is super simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase&amp;lt;Snow.ViewModels.ContentViewModel&amp;gt;
@using System.Collections.Generic
@{
  Layout = "default.cshtml";
}

&amp;lt;header&amp;gt;
    &amp;lt;div class="head-inner"&amp;gt;
        &amp;lt;h1&amp;gt;Drafts&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class="category-list fancy-container darkishblue"&amp;gt;
@foreach(var draft in Model.Drafts){
  &amp;lt;li&amp;gt;&amp;lt;a href="@draft.Url" title="@draft.Title"&amp;gt;@draft.Title&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how I have mine marked up, similar to how my archive pages work. &lt;/p&gt;

&lt;p&gt;Next, add it to the config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a snippet of my config&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;},{
    "file": "archive.cshtml"
},{
    "file": "drafts.cshtml",
    "loop": "Drafts"
},{
    "file": "about.cshtml"
},{
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it, now we can compile our Snow site.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Bam we have a new index file, and it has listed out the current drafts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;
    &amp;lt;div class="head-inner"&amp;gt;
        &amp;lt;h1&amp;gt;Drafts&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class="category-list fancy-container darkishblue"&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href="/drafts//2013/11/snow-gets-drafts/" title="Snow gets Drafts!"&amp;gt;Snow gets Drafts!&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;h2&gt;Things to note.&lt;/h2&gt;

&lt;p&gt;Snow has some Razor helpers for things like Analytics. If you're using the helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.RenderGoogleAnalytics("UA-######-##")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then Snow will not render any analytically code for the Draft index or compiled Draft Posts. This means Google wont pick it up unless you link to it somewhere. &lt;em&gt;(considering adding a helper to set no-cache and such in the header)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyway that's it, the new Drafts feature in Snow. Thanks again to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for implementing this for us!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/11/making-nancy-modules-easier-to-manage/</guid><link>http://www.philliphaydon.com/2013/11/making-nancy-modules-easier-to-manage/</link><title>Making Nancy Modules easier to manage</title><description>&lt;p&gt;One problem I think a lot of developers have, is creating Controllers and Modules that are small and maintainable. Sometimes when you add some querying, bit of validation, pass it off to a repository or service, etc. It begins to become a little bit too big. &lt;/p&gt;

&lt;p&gt;Lets assume our we have an &lt;code&gt;AccountModule&lt;/code&gt; it Gets a Login route to load the UI, and Posts to a Login route to authenticate the user, and do something.&lt;/p&gt;

&lt;p&gt;It also Gets a Register route to load the UI, and Posts to a Register route to register the new user. &lt;/p&gt;

&lt;p&gt;Without an actual implementation, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountModule : NancyModule
{
    public AccountModule() : base("/account")
    {
        Get["/login"] = _ =&amp;gt; "login";
        Post["/login"] = _ =&amp;gt; "login";

        Get["/register"] = _ =&amp;gt; "register";
        Post["/register"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we only have 4 things to implement, its rather small, somewhat easy to manage, but what happens when we want to update an account?&lt;/p&gt;

</description><pubDate>Sat, 02 Nov 2013 16:00:00 Z</pubDate><a10:updated>2013-11-02T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;One problem I think a lot of developers have, is creating Controllers and Modules that are small and maintainable. Sometimes when you add some querying, bit of validation, pass it off to a repository or service, etc. It begins to become a little bit too big. &lt;/p&gt;

&lt;p&gt;Lets assume our we have an &lt;code&gt;AccountModule&lt;/code&gt; it Gets a Login route to load the UI, and Posts to a Login route to authenticate the user, and do something.&lt;/p&gt;

&lt;p&gt;It also Gets a Register route to load the UI, and Posts to a Register route to register the new user. &lt;/p&gt;

&lt;p&gt;Without an actual implementation, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountModule : NancyModule
{
    public AccountModule() : base("/account")
    {
        Get["/login"] = _ =&amp;gt; "login";
        Post["/login"] = _ =&amp;gt; "login";

        Get["/register"] = _ =&amp;gt; "register";
        Post["/register"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we only have 4 things to implement, its rather small, somewhat easy to manage, but what happens when we want to update an account?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;Get["details"] = _ =&amp;gt; "details...";
Post["details"] = _ =&amp;gt; "details...";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we want to have a profile...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["profile"] = _ =&amp;gt; "profile...";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just keeps adding up...&lt;/p&gt;

&lt;p&gt;At this point it begins to get cluttered. Not only that, I believe this also breaks the Single Responsibility Principal.&lt;/p&gt;

&lt;h2&gt;My solution!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This isn't anything new, I personally haven't seen anyone blog about this stuff but I have absolutely no doubt people most likely create controllers like this in MVC&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that's why I've decided Modules should be broken up into Functionality rather than Functional Areas.&lt;/p&gt;

&lt;p&gt;All these things hang off &lt;code&gt;Account&lt;/code&gt;, so lets create an &lt;code&gt;Account&lt;/code&gt; folder in our &lt;code&gt;Modules&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;Inside this folder we can create 4 new modules.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/small-nancy-module-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So we have 4 modules rather than 1:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DetailsModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoginModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProfileModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegisterModule&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can expect, these are all really small now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DetailsModule : NancyModule
{
    public DetailsModule()
        : base("/account/details")
    {
        Get["/"] = _ =&amp;gt; "details";
    }
}

public class LoginModule : NancyModule
{
    public LoginModule()
        : base("/account/login")
    {
        Get["/"] = _ =&amp;gt; "login";
        Post["/"] = _ =&amp;gt; "login";
    }
}

public class ProfileModule : NancyModule
{
    public ProfileModule()
        : base("/account/profile")
    {
        Get["/"] = _ =&amp;gt; "profile...";
    }
}

public class RegisterModule : NancyModule
{
    public RegisterModule()
        : base("/account/register")
    {
        Get["/"] = _ =&amp;gt; "register";
        Post["/"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From our folder perspective we can easily find all Modules under the &lt;code&gt;/account&lt;/code&gt; route, and easily find the one related to &lt;code&gt;Login&lt;/code&gt;, or &lt;code&gt;Register&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;This also makes unit testing easier since we only need to worry about dependencies related to a specific piece of functionality. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Login&lt;/code&gt; might use a RavenDB session and Password Hashing Service, while &lt;code&gt;Profile&lt;/code&gt; may use RavenDB and a 3rd party Image hosting service for Profile pictures. &lt;/p&gt;

&lt;p&gt;Disagree or have a better way? Would love to hear! Share in the comments :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/running-javascript-unit-tests-in-visual-studio-with-jasmine-and-resharper/</guid><link>http://www.philliphaydon.com/2013/10/running-javascript-unit-tests-in-visual-studio-with-jasmine-and-resharper/</link><title>Running JavaScript Unit Tests in Visual Studio with Jasmine &amp; ReSharper</title><description>&lt;p&gt;There's so much information on the internet in terms of JavaScript Unit Testing and how to run tests etc, but when it comes to running tests in Visual Studio, without a browser, there's very little information. I had to piece information together to figure it out.&lt;/p&gt;

&lt;p&gt;So I'm going to do a small series on this.&lt;/p&gt;

&lt;p&gt;Things you will need!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pivotal.github.io/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup PhantomJS&lt;/h2&gt;

&lt;p&gt;To run JavaScript tests without a browser, we need PhantomJS, and we need to wire it up into Resharper.&lt;/p&gt;

</description><pubDate>Wed, 23 Oct 2013 16:00:00 Z</pubDate><a10:updated>2013-10-23T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;There's so much information on the internet in terms of JavaScript Unit Testing and how to run tests etc, but when it comes to running tests in Visual Studio, without a browser, there's very little information. I had to piece information together to figure it out.&lt;/p&gt;

&lt;p&gt;So I'm going to do a small series on this.&lt;/p&gt;

&lt;p&gt;Things you will need!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pivotal.github.io/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup PhantomJS&lt;/h2&gt;

&lt;p&gt;To run JavaScript tests without a browser, we need PhantomJS, and we need to wire it up into Resharper.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Download PhantomJS and unzip it somewhere, I put it in my development folder. Next open up ReSharper Options:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the Unit Testing &gt; JavaScript Tests and set the PhantomJS path to the &lt;code&gt;.exe&lt;/code&gt; where you unzipped it to:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Save all that and PhantomJS will be all setup and ready to run out tests!&lt;/p&gt;

&lt;h2&gt;Folder Setup&lt;/h2&gt;

&lt;p&gt;In Visual Studio create a new &lt;code&gt;Empty Project&lt;/code&gt;, or something similar, add some folders, naming isn't important but I've stuck with &lt;code&gt;dependencies&lt;/code&gt; for things like Jasmine, &lt;code&gt;sources&lt;/code&gt; for the files we will be testing, and &lt;code&gt;specs&lt;/code&gt; for the Jasmine specs.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;jasmine.js&lt;/code&gt; file into the dependencies folder, and create two empty files for &lt;code&gt;Calculator.js&lt;/code&gt; and &lt;code&gt;CalculatorSpec.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will create a super simple calculator that's only capable of multiplying two numbers. There's lots of Jasmine examples so I'm not going to bore you with those details. &lt;/p&gt;

&lt;h2&gt;Our first basic test&lt;/h2&gt;

&lt;p&gt;Lets start by adding a basic test in our &lt;code&gt;CalculatorSpec.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///&amp;lt;reference path="~/dependencies/jasmine.js"/&amp;gt;
///&amp;lt;reference path="~/sources/Calculator.js"/&amp;gt;

describe("Calculator", function () {
    var calculator = new Calculator();

    it("should multiple two positive numbers", function () {
        var result = calculator.multiple(2, 5);

        expect(result).toBe(10);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's break this down, at the top I have some 'reference path' comments, then I have the actual test. The reference paths is what got me initially when trying to get this working.&lt;/p&gt;

&lt;p&gt;Its a Visual Studio thing which gives intellisense, but it also allows ReSharper to find the files when running the unit tests. Without it the tests fail. &lt;/p&gt;

&lt;p&gt;So if we run this test now...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We have no implementation, so lets implement!&lt;/p&gt;

&lt;p&gt;Lets create a new function for the &lt;code&gt;Calculator&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now its undefined on the function call &lt;code&gt;multiple&lt;/code&gt;, so lets add it in, but lets return a hard coded value of -100&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {
    this.multiple = function() {
        return -100;
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Almost there, now lets multiple two values together!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {
    this.multiple = function(valueOne, valueTwo) {
        return valueOne * valueTwo;
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM it passes!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Our first test without a browser.&lt;/p&gt;

&lt;p&gt;Next up I'll show you how you can also test with a browser, and how to reference files in a separate project.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/semantic-ui-and-angularjs-basic-registration-form-with-validation/</guid><link>http://www.philliphaydon.com/2013/10/semantic-ui-and-angularjs-basic-registration-form-with-validation/</link><title>Semantic-UI &amp; AngularJS - Basic Registration Form with Validation</title><description>&lt;p&gt;Last week I saw a tweet about Semantic-UI, which I had not heard about, I guess it's relatively new. I decided to take a look and to be honest. I love what I see.&lt;/p&gt;

&lt;p&gt;So to get rolling I decided to create a basic registration form for a personal project using it. &lt;/p&gt;

&lt;h2&gt;What is Semantic UI&lt;/h2&gt;

&lt;p&gt;Well, for starters, its a rather large library :| coming in total at a whopping 333kb for just the minified CSS an JavaScript.&lt;/p&gt;

&lt;p&gt;That's not including the Fonts &lt;em&gt;(roughly 50kb, unless you like SVG which is 194kb, but who the hell uses that crap)&lt;/em&gt;, Images which are about 3-10kb, though you probably only use 1 or 2 per app depending on what you're doing. These are all loading gifs, all other images are... well done using Font-Awesome. Which happens to be rolled into the library.&lt;/p&gt;

&lt;p&gt;But for what the library does, its pretty damn impressive. &lt;/p&gt;

&lt;p&gt;The idea is that Semantic is a more fluent and structured way to writing a web application, rather than naming stuff poorly like Bootstrap does with things like &lt;code&gt;col-lg-4&lt;/code&gt;, Semantic opts for &lt;code&gt;column&lt;/code&gt;. This is both good and bad. The examples on their homepage are more semantic, but at the cost of either writing less or more code in order to describe the UI elements in the markup. &lt;/p&gt;

&lt;p&gt;Reading the examples is awesome, in fact I wanted to right align a button, I started out with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I thought "I want that floated right, it would look better...", and I ended up with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button floated right&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You end up writing lots but instead of shifting around in CSS to figure out how to move it from left to right, I just described it. Sure enough, button sat on the right hand side!&lt;/p&gt;

</description><pubDate>Fri, 04 Oct 2013 16:00:00 Z</pubDate><a10:updated>2013-10-04T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Last week I saw a tweet about Semantic-UI, which I had not heard about, I guess it's relatively new. I decided to take a look and to be honest. I love what I see.&lt;/p&gt;

&lt;p&gt;So to get rolling I decided to create a basic registration form for a personal project using it. &lt;/p&gt;

&lt;h2&gt;What is Semantic UI&lt;/h2&gt;

&lt;p&gt;Well, for starters, its a rather large library :| coming in total at a whopping 333kb for just the minified CSS an JavaScript.&lt;/p&gt;

&lt;p&gt;That's not including the Fonts &lt;em&gt;(roughly 50kb, unless you like SVG which is 194kb, but who the hell uses that crap)&lt;/em&gt;, Images which are about 3-10kb, though you probably only use 1 or 2 per app depending on what you're doing. These are all loading gifs, all other images are... well done using Font-Awesome. Which happens to be rolled into the library.&lt;/p&gt;

&lt;p&gt;But for what the library does, its pretty damn impressive. &lt;/p&gt;

&lt;p&gt;The idea is that Semantic is a more fluent and structured way to writing a web application, rather than naming stuff poorly like Bootstrap does with things like &lt;code&gt;col-lg-4&lt;/code&gt;, Semantic opts for &lt;code&gt;column&lt;/code&gt;. This is both good and bad. The examples on their homepage are more semantic, but at the cost of either writing less or more code in order to describe the UI elements in the markup. &lt;/p&gt;

&lt;p&gt;Reading the examples is awesome, in fact I wanted to right align a button, I started out with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I thought "I want that floated right, it would look better...", and I ended up with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button floated right&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You end up writing lots but instead of shifting around in CSS to figure out how to move it from left to right, I just described it. Sure enough, button sat on the right hand side!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Things used in this demo&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://semantic-ui.com"&gt;Semantic UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://angularjs.org"&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nancyfx.org"&gt;NancyFX&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nothing is complete without Nancy, but I'm not showing any Nancy stuff. I'm including it in-case I show the server side stuff. &lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;Download the latest version of Semantic from the website and include the packages folder into your project.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And include them into your page...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="utf-8"&amp;gt;
  &amp;lt;title&amp;gt;DemoWebsite&amp;lt;/title&amp;gt;

  &amp;lt;link href="/content/semantic/css/semantic.min.css" rel="stylesheet" type="text/css"/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;script src="/content/jquery-1.10.2.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="/content/semantic/javascript/semantic.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="/content/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this, we should get a nice blank page :)&lt;/p&gt;

&lt;h2&gt;Creating the form&lt;/h2&gt;

&lt;p&gt;Lets start by writing some HTML for the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt; 
  &amp;lt;h1&amp;gt;Register Now&amp;lt;/h1&amp;gt;

  &amp;lt;div class="ui form segment"&amp;gt;   
    &amp;lt;div class="two fields"&amp;gt;
      &amp;lt;div class="field"&amp;gt;
        &amp;lt;label for="GivenName"&amp;gt;Given Name&amp;lt;/label&amp;gt;
        &amp;lt;input id="GivenName" placeholder="Given Name" type="text" /&amp;gt;
      &amp;lt;/div&amp;gt;

      &amp;lt;div class="field"&amp;gt;
        &amp;lt;label for="Surname"&amp;gt;Surname&amp;lt;/label&amp;gt;
        &amp;lt;input id="Surname" placeholder="Surname" type="text"&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="Email"&amp;gt;Email&amp;lt;/label&amp;gt;
      &amp;lt;input id="Email" placeholder="Email" type="text"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="Username"&amp;gt;Username&amp;lt;/label&amp;gt;
      &amp;lt;input id="Username" placeholder="Username" type="text"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="Password"&amp;gt;Password&amp;lt;/label&amp;gt;
      &amp;lt;input id="Password" type="password"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="PasswordConfirm"&amp;gt;Password Confirm&amp;lt;/label&amp;gt;
      &amp;lt;input id="PasswordConfirm" type="password"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;button class="ui blue button"&amp;gt;Submit&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;    
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special, this is using the Semantic markup. The outer &lt;code&gt;container&lt;/code&gt; div is just a element I added to center the page. Without adding anything to the styling to change the look and feel, we get a page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Doesn't look too bad.&lt;/p&gt;

&lt;h2&gt;Lets add some validation&lt;/h2&gt;

&lt;p&gt;Based on the documentation you can add validation in HTML, but I prefer to do it in JavaScript, so that's how I'll do it now :)&lt;/p&gt;

&lt;p&gt;First we need to find the form element, then call &lt;code&gt;.form(*validation*, *options*)&lt;/code&gt; on it to wire it up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;

  (function ($) {
    $('.ui.form').form({        
      givenName: {
        identifier: 'GivenName',
        rules: [{
          type: 'empty',
          prompt: 'Please enter your given name'
        }]
      },       
      surname: {
        identifier: 'Surname',
        rules: [{
          type: 'empty',
          prompt: 'Please enter your surname'
        }]
      },       
      username: {
        identifier: 'Username',
        rules: [{
          type: 'empty',
          prompt: 'Please enter a username'
        }]
      },       
      email: {
        identifier: 'Email',
        rules: [{
          type: 'empty',
          prompt: 'Please enter your email'
        },{
          type: 'email',
          prompt: 'Please enter a valid email'
        }]
      },       
      password: {
        identifier: 'Password',
        rules: [{
          type: 'empty',
          prompt: 'Please enter a password'
        },{
          type: 'length[6]',
          prompt: 'Password needs to be atleast 6 characters long'
        }]
      },       
      passwordConfirm: {
        identifier: 'PasswordConfirm',
        rules: [{
          type: 'match[Password]',
          prompt: 'Password don\'t match'
        }]
      }
    }, {
      on: 'blur',
      inline: 'true'
    });
  }(jQuery));

&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's break this up, first we have an array of validation rules. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;email: {
  identifier: 'Email',
  rules: [{
    type: 'empty',
    prompt: 'Please enter your email'
  },{
    type: 'email',
    prompt: 'Please enter a valid email'
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part &lt;code&gt;email&lt;/code&gt; is the identifier in Semantic. &lt;/p&gt;

&lt;p&gt;The next bit of the identifier, this can match against either &lt;code&gt;id&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;data-validate&lt;/code&gt; attributes on the element. I picked the &lt;code&gt;id&lt;/code&gt; since I'm using &lt;code&gt;for&lt;/code&gt; on my labels.&lt;/p&gt;

&lt;p&gt;Next bit of the rules, which is an array of objects defining the type of validation, and the message to prompt the user with. This is somewhat the same as using jQuery Validate (except it works...)&lt;/p&gt;

&lt;p&gt;The second part is the settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  on: 'blur',
  inline: 'true'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part says we want validation to occur on blur, and we want it to be inline. &lt;/p&gt;

&lt;p&gt;This gives us the following effect.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we wanted to put all errors in a list at the bottom by adding &lt;code&gt;&amp;lt;div class="ui error message"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; to the bottom (or top) of the form.&lt;/p&gt;

&lt;p&gt;This would give us something like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Though the form will only display the messages at the bottom if you manually validate the form, or press submit. We haven't defined our button as a submit button, which I'll explain soon.&lt;/p&gt;

&lt;h2&gt;Let's create a Controller and get this validated!&lt;/h2&gt;

&lt;p&gt;So assuming you've setup your Angular App...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang="en" ng-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And set the controller...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="ui form segment" ng-controller="RegisterController"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now create our &lt;code&gt;RegisterController&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function RegisterController($scope) {
  $scope.register = function() {
    alert("Register was clicked!");
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and simple. Wire up an Angular click event to the button...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button class="ui blue button" ng-click="register()"&amp;gt;Submit&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the button doesn't define &lt;code&gt;submit&lt;/code&gt; class. If you put the &lt;code&gt;submit&lt;/code&gt;, Semantic will try and handle submission. We don't want that.&lt;/p&gt;

&lt;p&gt;Now if we click the button we should get a prompt:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to check the form is valid. In the controller we can add a basic function to invoke validate on the Semantic form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function RegisterController($scope, $element) {
  var registrationForm = $($element);

  $scope.isInvalid = function() {
    return !registrationForm.form('validate form');
  };

  $scope.register = function () {
    if (this.isInvalid()) {
      return;
    }

    alert("Register was clicked!");
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we inject the &lt;code&gt;$element&lt;/code&gt; into the Controller, this gives us the current scope element the controller is attached to. Since we attached it to the form the scope for the form in Semantic and Angular is the same.&lt;/p&gt;

&lt;p&gt;This is a Angular object though, so we need to then convert it to a jQuery.&lt;/p&gt;

&lt;p&gt;Now we can implement the isInvalid method which will call &lt;code&gt;form&lt;/code&gt;, a jQuery plugin implemented by Semantic, and pass in the argument &lt;code&gt;validate form&lt;/code&gt; which tells it to... well validate the form.&lt;/p&gt;

&lt;p&gt;The result is true or false, and the UI will now show an invalid state.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we've got validation working! Woohoo!&lt;/p&gt;

&lt;p&gt;Next we need some data, so lets create an empty property on our scope to work with, this will be our model called &lt;code&gt;user&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function RegisterController($scope, $element) {
  var registrationForm = $($element);

  $scope.user = {};

  $scope.isInvalid = function() {
    return !registrationForm.form('validate form');
  };

  $scope.register = function () {
    if (this.isInvalid()) {
      return;
    }

    console.log(this.user);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets update all the input fields to define the model we want to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input id="GivenName" placeholder="Given Name" type="text" ng-model="user.givenname"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ng-model="user.surname"
ng-model="user.email"
ng-model="user.username"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the idea.&lt;/p&gt;

&lt;p&gt;Back to our form, we fill it in, hit submit...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nothing has happened, the form is valid, but we logged the user to the console, did we get anything?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We sure did!&lt;/p&gt;

&lt;h2&gt;Lets tidy up the form a little&lt;/h2&gt;

&lt;p&gt;So we want to make the input fields show they are required, at the moment there's no visual indication.&lt;/p&gt;

&lt;p&gt;Semantic allows us to put little icons in the corner, its super awesome and super simple.&lt;/p&gt;

&lt;p&gt;We will update our &lt;code&gt;input elements&lt;/code&gt; like so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="ui icon input"&amp;gt;
  &amp;lt;input id="GivenName" placeholder="Given Name" type="text" ng-model="user.givenname"&amp;gt;
  &amp;lt;i class="asterisk red icon"&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get some nice little asterisk's on each input.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;What about when we submit the form? We want to block the form UI until we are done. So we can add a loading to the form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="ui inverted dimmer" ng-class="{true: 'active', false: 'disabled'}[loading]"&amp;gt;
  &amp;lt;div class="ui text loader"&amp;gt;Registering you now :)&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the top of the form, we add a new div with the classes for a loader. &lt;/p&gt;

&lt;p&gt;We include the &lt;code&gt;ng-class&lt;/code&gt; attribute so we can easily toggle the loading. Basically if the value &lt;code&gt;[loading]&lt;/code&gt; is true, it will set the &lt;code&gt;active&lt;/code&gt; class to the element, when false, it will set it to &lt;code&gt;disabled&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now in our controller we can add.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$scope.loading = false;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And in our click event we can set it to true after before we submit everything, but after we verify its valid.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.register = function () {
  if (this.isInvalid()) {
    return;
  }

  this.loading = true;

  console.log(this.user);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Normally you would set it to false again, but I've left it as true to show the affect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And there we have it. &lt;/p&gt;

&lt;p&gt;We built:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic registration form&lt;/li&gt;
&lt;li&gt;Added basic validation&lt;/li&gt;
&lt;li&gt;Added some fancy mandatory icons&lt;/li&gt;
&lt;li&gt;Captured the click event with Angular&lt;/li&gt;
&lt;li&gt;Validated using Semantic&lt;/li&gt;
&lt;li&gt;Added a loading indicator blocking the form&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was the first thing I did putting the two together. I've messed around with Angular quite a bit, first time touching Semantic.&lt;/p&gt;

&lt;p&gt;It took me about 7-10 minutes to write the demo, and 2 hours to break it apart and write the blog post piece by piece.&lt;/p&gt;

&lt;p&gt;Hopefully people find it useful.&lt;/p&gt;

&lt;p&gt;I've put the project on &lt;a href="https://github.com/phillip-haydon/Demo-SemanticUIAngular"&gt;Github&lt;/a&gt; if you're interested in taking a look. There isn't much :)&lt;/p&gt;

&lt;p&gt;I love Semantic, and Angular... So so awesome :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/introducing-sandra-snow/</guid><link>http://www.philliphaydon.com/2013/10/introducing-sandra-snow/</link><title>Introducing Sandra.Snow</title><description>&lt;p&gt;I've only been blogging since 2009, and my blog had gone through multiple iterations. I began on BlogEngine.NET, moved onto Wordpress, then was introduced to Jekyll. &lt;/p&gt;

&lt;p&gt;I loved Jekyll, but I personally found it fiddly, and people who I've spoken to have also found it fiddly, but are quiet happy after they had set it up.&lt;/p&gt;

&lt;p&gt;I really liked the idea, so I thought I would recreate it in .NET :) Because reinventing the wheel is fun!&lt;/p&gt;

&lt;h2&gt;Introducing Sandra.Snow&lt;/h2&gt;

&lt;p&gt;With the help of &lt;a href="https://twitter.com/jchannon"&gt;@jchannon&lt;/a&gt;, I've managed release Snow. Using NancyFX we have created a small application that allows you to write Markdown Posts with Razor Layouts, which will be compiled static HTML files.&lt;/p&gt;

&lt;p&gt;Currently, besides my own, I'm aware of 3 other blogs running on Snow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jonathanchannon.com"&gt;blog.jonathanchannon.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodejunkie.com/"&gt;thecodejunkie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.owenrumney.co.uk/"&gt;blog.owenrumney.co.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what is it? Basically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sandra.Snow is a Jekyll inspired static site generation tool that can be run locally, as a CAAS(Compiler as a Service) or setup with Azure to build your site when your repository changes. It is built on top of NancyFX.&lt;/p&gt;
&lt;/blockquote&gt;

</description><pubDate>Mon, 30 Sep 2013 16:00:00 Z</pubDate><a10:updated>2013-09-30T16:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;I've only been blogging since 2009, and my blog had gone through multiple iterations. I began on BlogEngine.NET, moved onto Wordpress, then was introduced to Jekyll. &lt;/p&gt;

&lt;p&gt;I loved Jekyll, but I personally found it fiddly, and people who I've spoken to have also found it fiddly, but are quiet happy after they had set it up.&lt;/p&gt;

&lt;p&gt;I really liked the idea, so I thought I would recreate it in .NET :) Because reinventing the wheel is fun!&lt;/p&gt;

&lt;h2&gt;Introducing Sandra.Snow&lt;/h2&gt;

&lt;p&gt;With the help of &lt;a href="https://twitter.com/jchannon"&gt;@jchannon&lt;/a&gt;, I've managed release Snow. Using NancyFX we have created a small application that allows you to write Markdown Posts with Razor Layouts, which will be compiled static HTML files.&lt;/p&gt;

&lt;p&gt;Currently, besides my own, I'm aware of 3 other blogs running on Snow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jonathanchannon.com"&gt;blog.jonathanchannon.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodejunkie.com/"&gt;thecodejunkie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.owenrumney.co.uk/"&gt;blog.owenrumney.co.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what is it? Basically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sandra.Snow is a Jekyll inspired static site generation tool that can be run locally, as a CAAS(Compiler as a Service) or setup with Azure to build your site when your repository changes. It is built on top of NancyFX.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The easiest way to getting started with Snow is to fork it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Sandra/Sandra.Snow.SnowTemplate"&gt;Sandra.Snow.SnowTemplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can fork the Snow Template repository, which is all setup and ready to go. Basically you fork it, run the &lt;code&gt;.bat&lt;/code&gt; file, and it will build the website into the current directory, and away you go.&lt;/p&gt;

&lt;p&gt;Push the fork back up to &lt;code&gt;gh-pages&lt;/code&gt; and you've got a site on GitHub pages :)&lt;/p&gt;

&lt;h2&gt;So what happening?!?&lt;/h2&gt;

&lt;p&gt;If you take a look at my blog repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/philliphaydon.com"&gt;https://github.com/phillip-haydon/philliphaydon.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was originally a Github Pages blog running on Jekyll, I've re-purposed it using the Sandra.Snow.SnowTemplate project.&lt;/p&gt;

&lt;p&gt;Basically in the root directory of the website are 4 key things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;./.nojekyll&lt;/li&gt;
&lt;li&gt;./CNAME&lt;/li&gt;
&lt;li&gt;./compile.snow.bat&lt;/li&gt;
&lt;li&gt;./Snow&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;.nojekyll&lt;/h3&gt;

&lt;p&gt;This is exactly what you think it is... it basically tells Github to not treat the site as a jekyll site. :) prevents me from receiving emails from Github.&lt;/p&gt;

&lt;h3&gt;CNAME&lt;/h3&gt;

&lt;p&gt;This file is super basic. It contains my blog URL. :)&lt;/p&gt;

&lt;h3&gt;compile.snow.bat&lt;/h3&gt;

&lt;p&gt;This file does two things. &lt;/p&gt;

&lt;p&gt;It executes &lt;a href="http://optipng.sourceforge.net"&gt;OptiPNG&lt;/a&gt; which is a little &lt;code&gt;.exe&lt;/code&gt; file which recompresses images to a smaller size. All my screen grabs are done using &lt;kbd&gt;PrtScn&lt;/kbd&gt; + Paint, so the &lt;code&gt;.png&lt;/code&gt; files are often larger than they should be. &lt;/p&gt;

&lt;p&gt;It may not be much, but my entire site is about 12mb of images, with the optimization its only 8.8mb. Github hosts my blog, but I'm more worried about end users downloading the images ASAP, especially if they are viewing on a mobile device.&lt;/p&gt;

&lt;p&gt;The second thing it executes is &lt;code&gt;Snow.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This line tells it to execute Snow, and the location of the config file. &lt;/p&gt;

&lt;h3&gt;Snow&lt;/h3&gt;

&lt;p&gt;This directory is my actual un-compiled website. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/philliphaydon.com/tree/gh-pages/Snow"&gt;Github Snow Directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In here is the actual exe under &lt;code&gt;_compiler&lt;/code&gt; and a snow.config file.&lt;/p&gt;

&lt;p&gt;The snow.config file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "siteUrl": "http://www.philliphaydon.com",
  "posts": "_posts",
  "layouts": "_layouts",
  "output": "../",
  "urlFormat": "yyyy/MM/slug",
  "directoryname": "",
  "copyDirectories": [
    "images/output =&amp;gt; images",
    "javascripts",
    "stylesheets",
    "stuffz"
  ],
  "processFiles": [{
    "file": "index.cshtml",
    "loop": "Posts"
  },{
    "file": "category.cshtml",
    "loop": "Categories"
  },{
    "file": "categories.cshtml =&amp;gt; category"
  },{
    "file": "archive.cshtml"
  },{
    "file": "about.cshtml"
  },{
    "file": "feed.xml",
    "loop": "RSS"
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's nothing special, it's just a JSON file. :)&lt;/p&gt;

&lt;p&gt;I specify where my posts are, where my layouts are, and where I want to output my site.&lt;/p&gt;

&lt;p&gt;This basically just generates all the markdown posts which live in &lt;code&gt;/Snow/_posts&lt;/code&gt;, then I have some additional files to process.&lt;/p&gt;

&lt;p&gt;Jekyll works by processing any file, but I personally don't like that. I opted for being specific and telling it what it should process. &lt;/p&gt;

&lt;h2&gt;Those markdown files!&lt;/h2&gt;

&lt;p&gt;The markdown files are similar to Jekyll, they use the same styled header like, well this blog post I'm writing right now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Introducing Sandra.Snow
categories: NancyFX, Snow
layout: post
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I ported my blog to Snow. I updated NONE of my markdown files. :) &lt;/p&gt;

&lt;p&gt;That's really all there is to it. &lt;/p&gt;

&lt;p&gt;The rest is just Markdown files, some Razor views, and a .exe&lt;/p&gt;

&lt;p&gt;It generates to the folder below by specifying the output as &lt;code&gt;../&lt;/code&gt;, but it preserves some folders. i.e it wont delete the .bat file, CNAME, .nojekyll, Snow, or .git/.svn&lt;/p&gt;

&lt;h2&gt;Stuff...&lt;/h2&gt;

&lt;p&gt;So that's it, I have some nifty little features too. I'm slowly detailing all this on the wiki. But the one I like most was inspired by a conversion with &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's the ability to specify a Series of posts:&lt;/p&gt;

&lt;p&gt;My blog series on setting up Mono on Azure/Ubuntu, has a special header in the markdown file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category: Azure
title: Setting up Mono on nginx
series:
    name: AzureMono
    current: 3
    part: Part 1 - Setting up the Virtual Machine and nginx
    part: Part 2 - Setting up new Website and Domain on nginx
    part: Part 3 - Setting up Mono on nginx
    part: Part 4 - Setting up a NancyFX website
    part: Part 5 - Setting up a ServiceStack web service
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each post has a 'series' and 3 key properties:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Name - specifies the unique identifier for the series.&lt;/p&gt;
  
  &lt;p&gt;Current - is the current index of the posts (its starting index is 1, not 0)&lt;/p&gt;
  
  &lt;p&gt;Part - the parts is a collection of all parts that will be in the series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Future posts will show without links, while past posts will show with the link they relate to.&lt;/p&gt;

&lt;p&gt;If you changed a future post name, it will take the current post's part name and use that, while previous post parts will be ignored. When the HTML files are generated they will be updated with the new series. Meaning you never need to go back and update old posts, or if they are far apart you don't have to hunt them down :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Well I hope you like Snow. So far I've had positive feedback, but if you choose to use it, I would love to hear what you use it for and any feedback, good or bad! Or post an issue on the repository.&lt;/p&gt;
</a10:content></item></channel></rss>